import 'package:bay_yahe_app/screens/Activities/activity_screen.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:geodesy/geodesy.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart' as GoogleMap;

import 'dart:math' as math;

class BookingService {
  final user = FirebaseAuth.instance.currentUser!;
  final CollectionReference bookings =
      FirebaseFirestore.instance.collection('booking_details');

  Future<void> addBooking(Map<String, dynamic> bookingData) async {
    await bookings.add(bookingData);
  }
}

class PaymentInformationScreen extends StatefulWidget {
  final LatLng pickupselectedLocation;
  final LatLng destinationselectedLocation;
  final String pickuplandmark;
  final String destinationlandmark;
  final String contactPerson;
  final String contactNumber;

  const PaymentInformationScreen({
    Key? key,
    required this.pickupselectedLocation,
    required this.destinationselectedLocation,
    required this.pickuplandmark,
    required this.destinationlandmark,
    required this.contactPerson,
    required this.contactNumber,
  }) : super(key: key);

  @override
  _PaymentInformationScreenState createState() =>
      _PaymentInformationScreenState();
}

class _PaymentInformationScreenState extends State<PaymentInformationScreen> {
  String? selectedPaymentMethod;
  String? selectedRecipient;
  String? selectedFareType;
  String? selectedPassengerType;
  TextEditingController pickUpLocationController = TextEditingController();
  TextEditingController destinationLocationController = TextEditingController();
  TextEditingController farePriceController = TextEditingController();
  double farePrice = 0.0;
  double totalPrice = 0.0;

  void _confirmPaymentInformation() async {
    BookingService bookingService = BookingService();
    final String status = "pending";

    String transactionId = _generateTransactionId();

    try {
      FirebaseFirestore firestore = FirebaseFirestore.instance;

      DocumentSnapshot documentSnapshot =
          await firestore.collection('price_list').doc('pricelist').get();

      if (documentSnapshot.exists) {
        Map<String, dynamic> priceListData =
            documentSnapshot.data() as Map<String, dynamic>;

        // Replace 'your_actual_fare_type' with the actual value

        if (priceListData.containsKey(selectedFareType)) {
          farePrice = priceListData[selectedFareType];
        } else {
          // Handle the case where the fareType is not found
          print('Fare type not found');
          return;
        }
      } else {
        // Handle the case where the document does not exist
        print('Document does not exist');
        return;
      }
    } catch (e) {
      print('Error retrieving fare price: $e');
      return;
    }

    // Calculate distance using Haversine formula
    double distance = _calculateDistance(
      widget.pickupselectedLocation.latitude,
      widget.pickupselectedLocation.longitude,
      widget.destinationselectedLocation.latitude,
      widget.destinationselectedLocation.longitude,
    );

    // Calculate total price
    totalPrice = distance * farePrice;

    Map<String, dynamic> bookingData = {
      'pickupLoc': {
        'latitude': widget.pickupselectedLocation.latitude,
        'longitude': widget.pickupselectedLocation.longitude,
      },
      'destinationLoc': {
        'latitude': widget.destinationselectedLocation.latitude,
        'longitude': widget.destinationselectedLocation.longitude,
      },
      'contactPerson': widget.contactPerson,
      'contactNumber': widget.contactNumber,
      'paymentMethod': selectedPaymentMethod,
      'fareType': selectedFareType,
      'passengerType': selectedPassengerType,
      'pickupLocation': widget.pickuplandmark,
      'destination': widget.destinationlandmark,
      'farePrice': farePrice,
      'totalPrice': totalPrice,
      'status': status,
      'transactionID': 'booking_' + transactionId,
      'bookingTime': DateTime.now(),
      'userId': FirebaseAuth.instance.currentUser!.uid,
      'distance': distance,
    };

    bookingService.addBooking(bookingData);
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => ActivityScreen()),
    );
  }

  // Helper method to generate a random transaction ID
  String _generateTransactionId() {
    Random random = Random();
    return DateTime.now().millisecondsSinceEpoch.toString() +
        random.nextInt(999).toString();
  }

  // Haversine formula to calculate distance between two coordinates
  double _calculateDistance(
    double startLatitude,
    double startLongitude,
    double endLatitude,
    double endLongitude,
  ) {
    const R = 6371.0; // Earth radius in kilometers

    double dLat = _degreesToRadians(endLatitude - startLatitude);
    double dLon = _degreesToRadians(endLongitude - startLongitude);

    double a = math.sin(dLat / 2) * math.sin(dLat / 2) +
        math.cos(_degreesToRadians(startLatitude)) *
            math.cos(_degreesToRadians(endLatitude)) *
            math.sin(dLon / 2) *
            math.sin(dLon / 2);

    double c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a));

    double distance = R * c; // Distance in kilometers
    return distance;
  }

  double _degreesToRadians(double degrees) {
    return degrees * (math.pi / 180.0);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Payment Information'),
      ),
      body: Container(
        decoration: const BoxDecoration(
          image: DecorationImage(
            image: AssetImage("assets/bg.png"), // Adjust the path accordingly
            fit: BoxFit.cover,
          ),
        ),
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Card(
              elevation: 5,
              child: Padding(
                padding: const EdgeInsets.all(20.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    const Text(
                      'Contact Person',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    TextFormField(
                      initialValue: widget.contactPerson,
                      enabled: false, // This makes the field read-only
                      decoration: InputDecoration(
                        border: OutlineInputBorder(),
                      ),
                    ),
                    const Text(
                      'Contact Number',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    TextFormField(
                      initialValue: widget.contactNumber,
                      enabled: false, // This makes the field read-only
                      decoration: InputDecoration(
                        border: OutlineInputBorder(),
                      ),
                    ),
                    const Text(
                      'Payment Method',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 10),
                    DropdownButton<String>(
                      isExpanded: true,
                      hint: const Text('Select'),
                      value: selectedPaymentMethod,
                      onChanged: (String? newValue) {
                        setState(() {
                          selectedPaymentMethod = newValue;
                        });
                      },
                      items: ['Cash', 'E-Cash'].map((String value) {
                        return DropdownMenuItem<String>(
                          value: value,
                          child: Text(value),
                        );
                      }).toList(),
                    ),
                    const SizedBox(height: 20),
                    const Text(
                      'Fare Type',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    DropdownButton<String>(
                      isExpanded: true,
                      hint: const Text('Select'),
                      value: selectedFareType,
                      onChanged: (String? newValue) {
                        setState(() {
                          selectedFareType = newValue;
                        });
                      },
                      items: ['ordinary', 'special'].map((String value) {
                        return DropdownMenuItem<String>(
                          value: value,
                          child: Text(value),
                        );
                      }).toList(),
                    ),
                    const SizedBox(height: 20),
                    const Text(
                      'Passenger Type',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    DropdownButton<String>(
                      isExpanded: true,
                      hint: const Text('Select'),
                      value: selectedPassengerType,
                      onChanged: (String? newValue) {
                        setState(() {
                          selectedPassengerType = newValue;
                        });
                      },
                      items: ['Regular', 'Student-PWD-Senior Citizen']
                          .map((String value) {
                        return DropdownMenuItem<String>(
                          value: value,
                          child: Text(value),
                        );
                      }).toList(),
                    ),
                    const SizedBox(height: 20),
                    const Text(
                      'Pick Up Location',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    TextFormField(
                      initialValue: widget.pickuplandmark,
                      enabled: false, // This makes the field read-only
                      decoration: InputDecoration(
                        border: OutlineInputBorder(),
                      ),
                    ),
                    const SizedBox(height: 20),
                    const Text(
                      'Destination',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    TextFormField(
                      initialValue: widget.destinationlandmark,
                      enabled: false, // This makes the field read-only
                      decoration: InputDecoration(
                        border: OutlineInputBorder(),
                      ),
                    ),
                    const SizedBox(height: 20),
                    const Text(
                      'Fare Price',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    TextFormField(
                      initialValue: farePrice.toString(),
                      enabled: false, // This makes the field read-only
                      decoration: InputDecoration(
                        border: OutlineInputBorder(),
                      ),
                    ),
                    const SizedBox(height: 20),
                    const Text(
                      'Map',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Container(
                        height: 200, // Adjust the height as needed
                        child: GoogleMap.GoogleMap(
                          initialCameraPosition: GoogleMap.CameraPosition(
                            target: GoogleMap.LatLng(
                              widget.pickupselectedLocation.latitude,
                              widget.pickupselectedLocation.longitude,
                            ),
                            zoom: 14.0,
                          ),
                          markers: <GoogleMap.Marker>{
                            GoogleMap.Marker(
                              markerId: GoogleMap.MarkerId('pickup_location'),
                              position: GoogleMap.LatLng(
                                widget.pickupselectedLocation.latitude,
                                widget.pickupselectedLocation.longitude,
                              ),
                              icon: GoogleMap.BitmapDescriptor.defaultMarker,
                              infoWindow: GoogleMap.InfoWindow(
                                title: 'Pickup Location',
                              ),
                            ),
                            GoogleMap.Marker(
                              markerId:
                                  GoogleMap.MarkerId('destination_location'),
                              position: GoogleMap.LatLng(
                                widget.destinationselectedLocation.latitude,
                                widget.destinationselectedLocation.longitude,
                              ),
                              icon: GoogleMap.BitmapDescriptor
                                  .defaultMarkerWithHue(
                                      GoogleMap.BitmapDescriptor.hueGreen),
                              infoWindow: GoogleMap.InfoWindow(
                                title: 'Destination Location',
                              ),
                            ),
                          },
                        )),
                    const SizedBox(height: 20),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          'Total',
                          style: TextStyle(fontWeight: FontWeight.bold),
                        ),
                        Text(totalPrice.toString()), // Display total price
                      ],
                    ),
                    const SizedBox(height: 20),
                    ElevatedButton(
                      onPressed: _confirmPaymentInformation,
                      child: const Text('Book Now'),
                      style: ElevatedButton.styleFrom(
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                        padding: const EdgeInsets.all(16),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
